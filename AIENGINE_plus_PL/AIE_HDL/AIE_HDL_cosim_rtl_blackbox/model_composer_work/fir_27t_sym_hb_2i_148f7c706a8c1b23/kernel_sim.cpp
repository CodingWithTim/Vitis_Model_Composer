// ==============================================================
// File generated by Xilinx Model Composer(TM)
// Version: 2022.1
//  
// (c) Copyright 2017 - 2022 Xilinx, Inc. All rights reserved.
//  
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
//  
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//  
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//  
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
// ==============================================================
#include "xmcSimLibInclude.h"

#include "src/kernels.h"




namespace {

using IWindowConnector = x86sim::IWindowConnector;
using IStreamConnector = x86sim::IStreamConnector;

class Kernel_simple : public x86sim::IMEKernel
{
public: 
   Kernel_simple(x86sim::ISimulator *sim, std::string label)
      : x86sim::IMEKernel(sim, label)
   {

   }
	~Kernel_simple()
	{

	}



protected: 
   virtual void invokeKernel() override
   {
using namespace x86sim;

      fir_27t_sym_hb_2i(get_input_window< cint16 >(((IWindowConnector*) input(0))->readWindow()),
  get_output_window< cint16 >(((IWindowConnector*) output(0))->writeWindow()));
   }

};


} // anonymous namespace

extern "C" {

__attribute__ ((visibility("default"))) void * xmcSimInit(char const *name)
{
   using SFactory = x86sim::SimulatorFactory;
   using ConnectorType = x86sim::IXmcSimulatorTypes::ConnectorType;
   using ElementDataType = x86sim::IXmcSimulatorTypes::ElementDataType;
   using Complexity = x86sim::IXmcSimulatorTypes::Complexity;
   using Synchronicity = x86sim::IXmcSimulatorTypes::Synchronicity;

   x86sim::ISimulatorConfig config;
   config.init();
   config._name = name;
   //config._enableEventTrace = true;
   //config._enableEventTracePrint = true;
   
   auto result = SFactory::xmcKernelSimulator
      (config,
  {
    { ConnectorType::kWindow, ElementDataType::kInt16, Complexity::kComplex }
  },
  {
    { ConnectorType::kWindow, ElementDataType::kInt16, Complexity::kComplex }
  }
      );
   auto k1 = new Kernel_simple(result, "k1");

   return result;
}

__attribute__ ((visibility("default"))) void xmcSimConfigKernelClassObject(void *sim,
                                                                           void *argv[])
{

}
      
} // extern "C"
